// Code generated by {{.Generator}} DO NOT EDIT

package {{.PkgVar}}

import (
    {{- if .RequireStrconvPkg}}
	"strconv"
	{{- end}}
    {{- if .RequireTimePkg}}
	"time"
	{{- end}}

	"github.com/frm-adiputra/csv2postgres/utils"
)

// Converter implements pipeline.Converter interface.
type Converter struct {}

// Convert converts field's values.
func (c Converter) Convert(fields map[string]interface{}) (map[string]interface{}, error) {
{{- range .Fields}}
{{- if eq .GoType "bool"}}
	if fields["{{.Name}}"] == "" {
		return nil, utils.ErrEmptyValue("{{.Name}}")
	}
	v{{upperCaseFirst .Name}}, err := strconv.ParseBool(fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "sql.NullBool"}}
	v{{upperCaseFirst .Name}}, err := utils.StringToNullBool(fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "float64"}}
	if fields["{{.Name}}"] == "" {
		return nil, utils.ErrEmptyValue("{{.Name}}")
	}
	v{{upperCaseFirst .Name}}, err := strconv.ParseFloat(fields["{{.Name}}"].(string), 64)
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "sql.NullFloat64"}}
	v{{upperCaseFirst .Name}}, err := utils.StringToNullFloat64(fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "int32"}}
	if fields["{{.Name}}"] == "" {
		return nil, utils.ErrEmptyValue("{{.Name}}")
	}
	v{{upperCaseFirst .Name}}, err := strconv.ParseInt(fields["{{.Name}}"].(string), 10, 32)
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "sql.NullInt32"}}
	v{{upperCaseFirst .Name}}, err := utils.StringToNullInt32(fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "int64"}}
	if fields["{{.Name}}"] == "" {
		return nil, utils.ErrEmptyValue("{{.Name}}")
	}
	v{{upperCaseFirst .Name}}, err := strconv.ParseInt(fields["{{.Name}}"].(string), 10, 64)
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "sql.NullInt64"}}
	v{{upperCaseFirst .Name}}, err := utils.StringToNullInt64(fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "string"}}
	if fields["{{.Name}}"] == "" {
		return nil, utils.ErrEmptyValue("{{.Name}}")
	}
	v{{upperCaseFirst .Name}} := fields["{{.Name}}"]
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "sql.NullString"}}
	v{{upperCaseFirst .Name}}, err := utils.StringToNullString(fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "time.Time"}}
	if fields["{{.Name}}"] == "" {
		return nil, utils.ErrEmptyValue("{{.Name}}")
	}
	v{{upperCaseFirst .Name}}, err := time.Parse("{{.TimeFormat}}", fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- else if eq .GoType "sql.NullTime"}}
	v{{upperCaseFirst .Name}}, err := utils.StringToNullTime("{{.TimeFormat}}", fields["{{.Name}}"].(string))
	if err != nil {
		return nil, utils.FieldError{Field: "{{.Name}}", Message: err.Error()}
	}
    fields["{{.Name}}"] = v{{upperCaseFirst .Name}}
{{- end}}{{end}}

    return fields, nil
}
