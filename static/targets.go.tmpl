// Code generated by {{.Generator}} DO NOT EDIT

// +build mage

package main

import (
    "fmt"
    {{- if .ViewsHasExport}}
    "os"
    "path/filepath"
    {{- end}}

    "github.com/magefile/mage/mg"
    {{- if .ViewsHasExport}}
    "github.com/joho/sqltocsv"
    {{- end}}
    {{- range .Specs}}
    "{{.ImportPath}}"
    {{- end}}
    {{- if .Views}}
    "{{$.ImportPath}}/internal/viewsql"
    {{- end}}
)

var (
    {{- range .Specs}}
    {{.PkgVar}}DB {{.PkgVar}}.DBSynchronizer
    {{- end}}
)

func init() {
    {{- range .Specs}}
    {{.PkgVar}}DB = {{.PkgVar}}.NewDBSynchronizer()
    {{- end}}
}
{{range .Specs}}
type {{upperCaseFirst .Name}} mg.Namespace
{{- end}}
{{range .Specs}}
// Drop drops table {{.Name}}
func (t {{upperCaseFirst .Name}}) Drop() error {
    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    fmt.Print("{{upperCaseFirst .Name}}: Dropping table...")
    err = {{.PkgVar}}DB.Drop(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

func (t {{upperCaseFirst .Name}}) depDrop() {
    {{- if .DropDeps}}
    mg.SerialDeps(
        {{- range .DropDeps}}
        {{upperCaseFirst .Name}}.Drop,
        {{- end}}
    )
    {{- end}}
}

// Create creates table {{.Name}}
func (t {{upperCaseFirst .Name}}) Create() error {
    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    fmt.Print("{{upperCaseFirst .Name}}: Creating table...")
    err = {{.PkgVar}}DB.Create(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

func (t {{upperCaseFirst .Name}}) depCreate() {
    {{- if .CreateDeps}}
    mg.SerialDeps(
        {{- range .CreateDeps}}
        {{upperCaseFirst .Name}}.Create,
        {{- end}}
    )
    {{- end}}
}

// Delete deletes rows from table {{.Name}}
func (t {{upperCaseFirst .Name}}) Delete() error {
    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    fmt.Print("{{upperCaseFirst .Name}}: Deleting table...")
    err = {{.PkgVar}}DB.Delete(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

func (t {{upperCaseFirst .Name}}) depDelete() {
    {{- if hasTableDep .DropDeps}}
    mg.SerialDeps(
        {{- range .DropDeps}}
        {{- if .Table}}
        {{upperCaseFirst .Name}}.Delete,
        {{- end}}
        {{- end}}
    )
    {{- end}}
}

// Fill fill rows of table {{.Name}}
func (t {{upperCaseFirst .Name}}) Fill() error {
    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    fmt.Print("{{upperCaseFirst .Name}}: Filling table...")
    err = {{.PkgVar}}DB.Fill(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Printf(" %d records [OK]\n", {{.PkgVar}}DB.RowCount())
    return nil
}

func (t {{upperCaseFirst .Name}}) depFill() {
    {{- if hasTableDep .CreateDeps}}
    mg.SerialDeps(
        {{- range .CreateDeps}}
        {{- if .Table}}
        {{upperCaseFirst .Name}}.Fill,
        {{- end}}
        {{- end}}
    )
    {{- end}}
}

// Up recreates and fill rows of table {{.Name}}
func (t {{upperCaseFirst .Name}}) Up() {
    mg.SerialDeps(
        {{upperCaseFirst .Name}}.depDrop,
        {{upperCaseFirst .Name}}.depCreate,
        {{upperCaseFirst .Name}}.depFill,
    )
}

// Down drops the table {{.Name}} and its dependants
func (t {{upperCaseFirst .Name}}) Down() {
    mg.SerialDeps(
        {{upperCaseFirst .Name}}.depDrop,
    )
}
{{- end}}
{{- range .Views}}
type {{toExportedName .Name}} mg.Namespace

// Drop drops view {{.Name}}
func (t {{toExportedName .Name}}) Drop() error {
    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    fmt.Print("{{toExportedName .Name}}: Dropping view...")
    _, err = db.Exec(viewsql.{{toExportedName .Name}}Drop)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

func (t {{toExportedName .Name}}) depDrop() {
    {{- if .DropDeps}}
    mg.SerialDeps(
        {{- range .DropDeps}}
        {{upperCaseFirst .Name}}.Drop,
        {{- end}}
    )
    {{- end}}
}

// Create creates view {{.Name}}
func (t {{toExportedName .Name}}) Create() error {
    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    fmt.Print("{{toExportedName .Name}}: Creating view...")
    _, err = db.Exec(viewsql.{{toExportedName .Name}}Create)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

func (t {{toExportedName .Name}}) depCreate() {
    {{- if .CreateDeps}}
    mg.SerialDeps(
        {{- range .CreateDeps}}
        {{upperCaseFirst .Name}}.Create,
        {{- end}}
    )
    {{- end}}
}

{{- if .Export}}

// Export exports view's query result to CSV.
func (t {{toExportedName .Name}}) Export() error {
    fmt.Print("{{toExportedName .Name}}: Exporting to CSV...")
    dir := filepath.Dir(`{{.Export}}`)
    err := os.MkdirAll(dir, 0777)
	if err != nil {
        fmt.Println("[FAILED]")
		return fmt.Errorf("{{.Name}} export to CSV: %w", err)
	}

    db, err := newDBConn()
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    defer db.Close()

    rows, err := db.Query(`SELECT * FROM "{{.Schema}}"."{{toSnake .Name}}"`)
    if err != nil {
        fmt.Println("[FAILED]")
        return fmt.Errorf("{{.Name}} export to CSV: %w", err)
    }
    defer rows.Close()

    err = sqltocsv.WriteFile("{{.Export}}", rows)
    if err != nil {
        fmt.Println("[FAILED]")
        return fmt.Errorf("{{.Name}} export to CSV: %w", err)
    }
    fmt.Println("[OK]")
    return nil
}
{{- end}}
{{- end}}

// AllUp recreates and fill rows of all tables
func AllUp() {
    mg.SerialDeps(
    {{- range .DropDepsAll}}
        {{upperCaseFirst .Name}}.Drop,
    {{- end}}
    {{- range .CreateDepsAll}}
        {{upperCaseFirst .Name}}.Create,
    {{- end}}
    {{- range .CreateDepsAll}}
        {{- if .Table}}
        {{upperCaseFirst .Name}}.Fill,
        {{- end}}
    {{- end}}
    {{- range .CreateDepsAll}}
        {{- if .Export}}
        {{upperCaseFirst .Name}}.Export,
        {{- end}}
    {{- end}}
    )
}

// AllDown drops all tables and its dependants
func AllDown() {
    mg.SerialDeps(
    {{- range .DropDepsAll}}
        {{upperCaseFirst .Name}}.Drop,
    {{- end}}
    )
}
