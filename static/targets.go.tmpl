// Code generated by {{.Generator}} DO NOT EDIT

package main

import (
    "fmt"
    {{- if .HasExport}}
    "os"
    "path/filepath"
    {{- end}}

    {{- if .HasExport}}
    "github.com/joho/sqltocsv"
    {{- end}}
    {{- range .TablesData}}
    "{{.ImportPath}}"
    {{- end}}
    {{- if .ViewsData}}
    "{{$.ImportPath}}/internal/viewsql"
    {{- end}}
)

var (
    {{- range .TablesData}}
    {{.PkgVar}}DB {{.PkgVar}}.DBSynchronizer // {{.RefName}}
    {{- end}}
)

func init() {
    {{- range .TablesData}}
    {{.PkgVar}}DB = {{.PkgVar}}.NewDBSynchronizer()
    {{- end}}
}
{{range .TablesData}}
// {{.TargetName}}Drop drops table {{.RefName}}
func {{.TargetName}}Drop(dryRun bool) error {
    fmt.Print("{{.RefName}}: Dropping table...")
    if dryRun {
        fmt.Println("[OK]")
        return nil
    }

    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    err = {{.PkgVar}}DB.Drop(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

// {{.TargetName}}DepDrop drops table {{.RefName}} after
// executing all of its dependencies
func {{.TargetName}}DepDrop(dryRun bool) error {
    {{- if .DropDeps}}
    {{- range .DropDeps}}
    if err := {{.TargetName}}Drop(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
    {{- end}}
    return nil
}

// {{.TargetName}}Create creates table {{.RefName}}
func {{.TargetName}}Create(dryRun bool) error {
    fmt.Print("{{.RefName}}: Creating table...")
    if dryRun {
        fmt.Println("[OK]")
        return nil
    }

    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    err = {{.PkgVar}}DB.Create(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

// {{.TargetName}}DepCreate creates table {{.RefName}} after
// executing all of its dependencies
func {{.TargetName}}DepCreate(dryRun bool) error {
    {{- if .CreateDeps}}
    {{- range .CreateDeps}}
    if err := {{.TargetName}}Create(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
    {{- end}}
    return nil
}

// {{.TargetName}}Delete deletes rows from table {{.RefName}}
func {{.TargetName}}Delete(dryRun bool) error {
    fmt.Print("{{.RefName}}: Deleting table...")
    if dryRun {
        fmt.Println("[OK]")
        return nil
    }

    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    err = {{.PkgVar}}DB.Delete(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

// {{.TargetName}}DepDelete deletes rows from table {{.RefName}} after
// executing all of its dependencies
func {{.TargetName}}DepDelete(dryRun bool) error {
    {{- if .DropDepsIncludeTable}}
    {{- range .DropDeps}}
    {{- if .Table}}
    if err := {{.TargetName}}Delete(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
    {{- end}}
    {{- end}}
    return nil
}

// {{.TargetName}}Fill fills rows of table {{.RefName}}
func {{.TargetName}}Fill(dryRun bool) error {
    fmt.Print("{{.RefName}}: Filling table...")
    if dryRun {
        fmt.Println("[OK]")
        return nil
    }

    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    err = {{.PkgVar}}DB.Fill(db)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Printf(" %d records [OK]\n", {{.PkgVar}}DB.RowCount())
    return nil
}

// {{.TargetName}}DepFill fills rows of table {{.RefName}} after
// executing all of its dependencies
func {{.TargetName}}DepFill(dryRun bool) error {
    {{- if .CreateDepsIncludeTable}}
    {{- range .CreateDeps}}
    {{- if .Table}}
    if err := {{.TargetName}}Fill(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
    {{- end}}
    {{- end}}
    return nil
}

// {{.TargetName}}Up recreates and fill rows of table {{.RefName}}
func {{.TargetName}}Up(dryRun bool) error {
    if err := {{.TargetName}}DepDrop(dryRun); err != nil {
        return err
    }

    if err := {{.TargetName}}DepCreate(dryRun); err != nil {
        return err
    }

    if err := {{.TargetName}}DepFill(dryRun); err != nil {
        return err
    }
    return nil
}

// {{.TargetName}}Down drops the table {{.RefName}} and its dependants
func {{.TargetName}}Down(dryRun bool) error {
    return {{.TargetName}}DepDrop(dryRun)
}
{{- end}}
{{- range .ViewsData}}

// {{.TargetName}}Drop drops view {{.RefName}}
func {{.TargetName}}Drop(dryRun bool) error {
    fmt.Print("{{.RefName}}: Dropping view...")
    if dryRun {
        fmt.Println("[OK]")
        return nil
    }

    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    _, err = db.Exec(viewsql.{{.TargetName}}Drop)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

// {{.TargetName}}DepDrop drops view {{.RefName}} after
// executing all of its dependencies
func {{.TargetName}}DepDrop(dryRun bool) error {
    {{- if .DropDeps}}
    {{- range .DropDeps}}
    if err := {{.TargetName}}Drop(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
    {{- end}}
    return nil
}

// {{.TargetName}}Create creates view {{.RefName}}
func {{.TargetName}}Create(dryRun bool) error {
    fmt.Print("{{.RefName}}: Creating view...")
    if dryRun {
        fmt.Println("[OK]")
        return nil
    }

    db, err := newDBConn()
    if err != nil {
        return err
    }
    defer db.Close()

    _, err = db.Exec(viewsql.{{.TargetName}}Create)
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    fmt.Println("[OK]")
    return nil
}

// {{.TargetName}}DepCreate creates view {{.RefName}} after
// executing all of its dependencies
func {{.TargetName}}DepCreate(dryRun bool) error {
    {{- if .CreateDeps}}
    {{- range .CreateDeps}}
    if err := {{.TargetName}}Create(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
    {{- end}}
    return nil
}

{{- if .Export}}

// {{.TargetName}}Export exports view's query result to CSV.
func {{.TargetName}}Export(dryRun bool) error {
    fmt.Print("{{.RefName}}: Exporting to CSV...")
    if dryRun {
        fmt.Println("[OK]")
        return nil
    }

    dir := filepath.Dir(`{{.Export}}`)
    err := os.MkdirAll(dir, 0777)
	if err != nil {
        fmt.Println("[FAILED]")
		return fmt.Errorf("{{.RefName}} export to CSV: %w", err)
	}

    db, err := newDBConn()
    if err != nil {
        fmt.Println("[FAILED]")
        return err
    }
    defer db.Close()

    rows, err := db.Query(`SELECT * FROM {{.SQLFullName}}`)
    if err != nil {
        fmt.Println("[FAILED]")
        return fmt.Errorf("{{.RefName}} export to CSV: %w", err)
    }
    defer rows.Close()

    err = sqltocsv.WriteFile("{{.Export}}", rows)
    if err != nil {
        fmt.Println("[FAILED]")
        return fmt.Errorf("{{.RefName}} export to CSV: %w", err)
    }
    fmt.Println("[OK]")
    return nil
}
{{- end}}
{{- end}}

// AllUp recreates and fill rows of all tables
func AllUp(dryRun bool) error {
{{- range .DropDepsAll}}
    if err := {{.TargetName}}Drop(dryRun); err != nil { // {{.RefName}}
        return err
    }
{{- end}}
{{- range .CreateDepsAll}}
    if err := {{.TargetName}}Create(dryRun); err != nil { // {{.RefName}}
        return err
    }
{{- end}}
{{- range .CreateDepsAll}}
    {{- if .Table}}
    if err := {{.TargetName}}Fill(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
{{- end}}
{{- range .CreateDepsAll}}
    {{- if .Export}}
    if err := {{.TargetName}}Export(dryRun); err != nil { // {{.RefName}}
        return err
    }
    {{- end}}
{{- end}}
    return nil
}

// AllDown drops all tables and its dependants
func AllDown(dryRun bool) error {
{{- range .DropDepsAll}}
    if err := {{.TargetName}}Drop(dryRun); err != nil { // {{.RefName}}
        return err
    }
{{- end}}
    return nil
}
