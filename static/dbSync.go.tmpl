// Code generated by {{.Generator}} DO NOT EDIT

package {{.PkgVar}}

import (
    "database/sql"
    "fmt"
    "io"

    "github.com/lib/pq"
    "github.com/frm-adiputra/csv2postgres/pipeline"
    {{- if .HasComputed}}
	"{{.ComputePackage}}"
	{{- end}}
)

// DBSynchronizer implements pipeline.DBSynchronizer.
type DBSynchronizer struct {
    name         string
	sqlCreate    string
	sqlDelete    string
	sqlDrop      string
    dependsOn    []string
    recordReader *pipeline.RecordReader
}

// NewDBSynchronizer creates a new instance.
func NewDBSynchronizer() DBSynchronizer {
    r := &pipeline.RecordReader{
        Name:          "{{.Name}}",
		RowReader:     NewCSVReader(),
		FieldProvider: &FieldProvider{},
		Converter:     Converter{},
		Computer:      Computer{
        {{- range .ComputeFns}}
            {{.Name}}: {{$.ComputePkgVar}}.{{.Name}},
        {{- end}}
        },
		Validator:     Validator{},
	}

    return DBSynchronizer{
        name: "{{.Table.Name}}",
        dependsOn: []string{
            {{- range .DependsOn}}
            `{{.}}`,
            {{- end}}
        },
        recordReader: r,
        sqlDelete: `DELETE FROM {{.Table.QuotedFullName}}`,
        sqlDrop: `DROP TABLE IF EXISTS {{.Table.QuotedFullName}}`,
        sqlCreate: `
            CREATE TABLE {{.Table.QuotedFullName}} (
            {{- $first := true}}
            {{- range .Fields}}
                {{- if not .Exclude}}
                {{- if $first}}
                    {{- $first = false}}
                {{- else}},{{end}}
                "{{.Name}}" {{.Type}} {{- if .Required}} NOT NULL{{- end}}
                {{- end}}
            {{- end}}
            {{- range .ComputedFields}},
                "{{.Name}}" {{.Type}}
            {{- end}}
            {{- range .Constraints}},
                {{.}}
            {{- end}}
            {{- $first := false}}
            )
        `,
    }
}

// Name returns the table's name
func (d DBSynchronizer) Name() string {
    return d.name
}

// DependsOn returns other tables that this table depends on
func (d DBSynchronizer) DependsOn() []string {
    return d.dependsOn
}

// Create table
func (d DBSynchronizer) Create(db *sql.DB) error {
    _, err := db.Exec(d.sqlCreate)
    return err
}

// Delete all rows from table
func (d DBSynchronizer) Delete(db *sql.DB) error {
    _, err := db.Exec(d.sqlDelete)
    return err
}

// Drop table
func (d DBSynchronizer) Drop(db *sql.DB) error {
    _, err := db.Exec(d.sqlDrop)
    return err
}

// Fill rows
func (d DBSynchronizer) Fill(db *sql.DB) error {
    err := d.recordReader.Open()
    if err != nil {
        return err
    }

    defer d.recordReader.Close()

    txn, err := db.Begin()
    if err != nil {
        return err
    }

    stmt, err := txn.Prepare(pq.{{if .Table.SchemaName}}CopyInSchema{{else}}CopyIn{{end}}(
        {{- if .Table.SchemaName}}
        "{{.Table.SchemaName}}",
        {{- end}}
        "{{.Table.TableName}}",
        {{- range .Fields}}
        {{- if not .Exclude}}
        "{{.Name}}",
        {{- end}}
        {{- end}}
        {{- range .ComputedFields}}
        {{- if not .Exclude}}
        "{{.Name}}",
        {{- end}}
        {{- end}}
    ))
    if err != nil {
        if rollbackErr := txn.Rollback(); rollbackErr != nil {
			return fmt.Errorf("failed to rollback: %s: %w",
                rollbackErr.Error(), err)
		}
        return err
    }

    for {
		rec, err := d.recordReader.ReadRecord()
		if err == io.EOF {
			break
		}
		if err != nil {
            stmt.Exec()
			if rollbackErr := txn.Rollback(); rollbackErr != nil {
                return fmt.Errorf("failed to rollback: %s: %w",
                    rollbackErr.Error(), err)
            }
            return err
		}
        _, err = stmt.Exec(
            {{- range .Fields}}
            {{- if not .Exclude}}
            rec["{{.Name}}"],
            {{- end}}
            {{- end}}
            {{- range .ComputedFields}}
            {{- if not .Exclude}}
            rec["{{.Name}}"],
            {{- end}}
            {{- end}}
        )
        if err != nil {
            stmt.Exec()
            if rollbackErr := txn.Rollback(); rollbackErr != nil {
                return fmt.Errorf("failed to rollback: %s: %w",
                    rollbackErr.Error(), err)
            }
            return err
        }
	}

    _, err = stmt.Exec()
    if err != nil {
        if rollbackErr := txn.Rollback(); rollbackErr != nil {
			return fmt.Errorf("failed to rollback: %s: %w",
                rollbackErr.Error(), err)
		}
        return err
    }

    err = stmt.Close()
    if err != nil {
        if rollbackErr := txn.Rollback(); rollbackErr != nil {
			return fmt.Errorf("failed to rollback: %s: %w",
                rollbackErr.Error(), err)
		}
        return err
    }

    err = txn.Commit()
    if err != nil {
        if rollbackErr := txn.Rollback(); rollbackErr != nil {
			return fmt.Errorf("failed to rollback: %s: %w",
                rollbackErr.Error(), err)
		}
        return err
    }
    return nil
}
